import { useRouter } from 'expo-router';
import React, { useEffect, useRef, useState } from 'react';
import { Animated, Dimensions, Text, TouchableOpacity, View } from 'react-native';
import GameLayout from '../../components/common/GameLayout';
import { shiritoriData as hiraganaData } from '../../constants/games/shiritoriHiragana';
import { shiritoriData as katakanaData } from '../../constants/games/shiritoriKatakana';
import { styles } from '../../styles/shiritori.styles';

const { width, height } = Dimensions.get('window');

// ÊãóÈü≥„Éû„ÉÉ„Éî„É≥„Ç∞
const yoonMapHiragana: { [key: string]: string } = {
  '„Åó„ÇÉ': '„ÇÑ', '„Åó„ÇÖ': '„ÇÜ', '„Åó„Çá': '„Çà',
  '„Åò„ÇÉ': '„ÇÑ', '„Åò„ÇÖ': '„ÇÜ', '„Åò„Çá': '„Çà',
  '„Å°„ÇÉ': '„ÇÑ', '„Å°„ÇÖ': '„ÇÜ', '„Å°„Çá': '„Çà',
  '„Åç„ÇÉ': '„ÇÑ', '„Åç„ÇÖ': '„ÇÜ', '„Åç„Çá': '„Çà',
  '„Åé„ÇÉ': '„ÇÑ', '„Åé„ÇÖ': '„ÇÜ', '„Åé„Çá': '„Çà',
  '„Å´„ÇÉ': '„ÇÑ', '„Å´„ÇÖ': '„ÇÜ', '„Å´„Çá': '„Çà',
  '„Å≤„ÇÉ': '„ÇÑ', '„Å≤„ÇÖ': '„ÇÜ', '„Å≤„Çá': '„Çà',
  '„Å≥„ÇÉ': '„ÇÑ', '„Å≥„ÇÖ': '„ÇÜ', '„Å≥„Çá': '„Çà',
  '„Å¥„ÇÉ': '„ÇÑ', '„Å¥„ÇÖ': '„ÇÜ', '„Å¥„Çá': '„Çà',
  '„Åø„ÇÉ': '„ÇÑ', '„Åø„ÇÖ': '„ÇÜ', '„Åø„Çá': '„Çà',
  '„Çä„ÇÉ': '„ÇÑ', '„Çä„ÇÖ': '„ÇÜ', '„Çä„Çá': '„Çà',
  '„ÇÉ': '„ÇÑ', '„ÇÖ': '„ÇÜ', '„Çá': '„Çà',
};

const yoonMapKatakana: { [key: string]: string } = {
  '„Ç∑„É£': '„É§', '„Ç∑„É•': '„É¶', '„Ç∑„Éß': '„É®',
  '„Ç∏„É£': '„É§', '„Ç∏„É•': '„É¶', '„Ç∏„Éß': '„É®',
  '„ÉÅ„É£': '„É§', '„ÉÅ„É•': '„É¶', '„ÉÅ„Éß': '„É®',
  '„Ç≠„É£': '„É§', '„Ç≠„É•': '„É¶', '„Ç≠„Éß': '„É®',
  '„ÇÆ„É£': '„É§', '„ÇÆ„É•': '„É¶', '„ÇÆ„Éß': '„É®',
  '„Éã„É£': '„É§', '„Éã„É•': '„É¶', '„Éã„Éß': '„É®',
  '„Éí„É£': '„É§', '„Éí„É•': '„É¶', '„Éí„Éß': '„É®',
  '„Éì„É£': '„É§', '„Éì„É•': '„É¶', '„Éì„Éß': '„É®',
  '„Éî„É£': '„É§', '„Éî„É•': '„É¶', '„Éî„Éß': '„É®',
  '„Éü„É£': '„É§', '„Éü„É•': '„É¶', '„Éü„Éß': '„É®',
  '„É™„É£': '„É§', '„É™„É•': '„É¶', '„É™„Éß': '„É®',
  '„É£': '„É§', '„É•': '„É¶', '„Éß': '„É®',
};

type ShiritoriData = {
  shiritoriWords: { [key: string]: string[] };
  wordsEndingWithN: { [key: string]: string[] };
};

type PlayerType = 'parent' | 'child';

export default function ShiritoriGame() {
  const router = useRouter();
  const [isHiragana, setIsHiragana] = useState(true);
  const [currentWord, setCurrentWord] = useState('');
  const [choices, setChoices] = useState<string[]>([]);
  const [currentPlayer, setCurrentPlayer] = useState<PlayerType>('parent');
  const [turn, setTurn] = useState(1);
  const [history, setHistory] = useState<string[]>([]);
  const [isGameOver, setIsGameOver] = useState(false);
  const [isResult, setIsResult] = useState(false);
  const [startTime, setStartTime] = useState<number | null>(null);
  const [times, setTimes] = useState<{ [key in PlayerType]: number[] }>({ parent: [], child: [] });
  const [elapsed, setElapsed] = useState(0);
  const [winner, setWinner] = useState('');
  const [wrongWord, setWrongWord] = useState('');
  const bounceAnim = useRef(new Animated.Value(0)).current;
  const textBounceAnim = useRef(new Animated.Value(0)).current;

  const shiritoriData = isHiragana ? hiraganaData as ShiritoriData : katakanaData as ShiritoriData;
  const yoonMap = isHiragana ? yoonMapHiragana : yoonMapKatakana;

  useEffect(() => {
    initializeGame();
  }, []);

  useEffect(() => {
    if (isGameOver || !startTime) return;
    const interval = setInterval(() => {
      setElapsed((Date.now() - startTime) / 1000);
    }, 100);
    return () => clearInterval(interval);
  }, [startTime, isGameOver]);

  useEffect(() => {
    if (isResult) {
      Animated.loop(
        Animated.sequence([
          Animated.timing(bounceAnim, {
            toValue: 1,
            duration: 500,
            useNativeDriver: true,
          }),
          Animated.timing(bounceAnim, {
            toValue: 0,
            duration: 500,
            useNativeDriver: true,
          }),
        ])
      ).start();

      Animated.loop(
        Animated.sequence([
          Animated.timing(textBounceAnim, {
            toValue: 1,
            duration: 250,
            useNativeDriver: true,
          }),
          Animated.timing(textBounceAnim, {
            toValue: 0,
            duration: 250,
            useNativeDriver: true,
          }),
        ])
      ).start();
    }
  }, [isResult]);

  const initializeGame = () => {
    const initialWord = getRandomWord();
    setCurrentWord(initialWord);
    generateChoices(initialWord);
    setStartTime(Date.now());
    setElapsed(0);
    setHistory([initialWord]);
    setTurn(1);
    setCurrentPlayer('parent');
    setIsGameOver(false);
    setIsResult(false);
    setWinner('');
    setTimes({ parent: [], child: [] });
    setWrongWord('');
  };

  const getRandomWord = () => {
    const shiritoriWords = shiritoriData.shiritoriWords;
    const wordsEndingWithN = Object.values(shiritoriData.wordsEndingWithN).flat();
    const allWords = Object.values(shiritoriWords).flat();
    const validWords = allWords.filter(word =>
      !wordsEndingWithN.includes(word) &&
      !word.endsWith(isHiragana ? '„Çì' : '„É≥')
    );
    return validWords[Math.floor(Math.random() * validWords.length)];
  };

  const generateChoices = (word: string) => {
    const lastChar = word.slice(-1);
    const normalizedLastChar = yoonMap[lastChar] || lastChar;
    const shiritoriWords = shiritoriData.shiritoriWords;
    const wordsEndingWithN = shiritoriData.wordsEndingWithN;

    const goWords = (shiritoriWords[normalizedLastChar] || []).slice();
    const goChoices = shuffle(goWords).slice(0, 2);

    const goNWords = (shiritoriWords[normalizedLastChar] || [])
      .filter(w => w.endsWith(isHiragana ? '„Çì' : '„É≥'));
    const goNChoice = shuffle(goNWords).slice(0, 1);

    let allWords = Object.values(shiritoriWords).flat();
    const exclude = new Set([...goChoices, ...goNChoice]);
    allWords = allWords.filter(w => !exclude.has(w));
    const randomChoices = shuffle(allWords).slice(0, 7);

    const result = shuffle([...goChoices, ...goNChoice, ...randomChoices]);
    setChoices(result);
  };

  const shuffle = (array: string[]) => {
    const arr = array.slice();
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  };

  const handleChoice = (choice: string) => {
    const endTime = Date.now();
    const timeTaken = (endTime - startTime!) / 1000;
    setTimes(prev => ({
      ...prev,
      [currentPlayer]: [...prev[currentPlayer], timeTaken]
    }));
    setElapsed(0);

    if (history.includes(choice)) {
      setWrongWord(choice);
      setIsGameOver(true);
      setIsResult(true);
      setWinner((currentPlayer === 'parent' ? 'üê∂' : 'ü¶Å') + '„ÅÆÂãù„Å°ÔºÅÔºàÂêå„ÅòÂçòË™û„ÇíÁπ∞„ÇäËøî„Åó„ÅüÔºâ');
      return;
    }

    const prevWord = history[history.length - 1];
    let prevLastChar = prevWord.slice(-1);
    if (prevWord.length >= 2) {
      const lastTwoChars = prevWord.slice(-2);
      if (yoonMap[lastTwoChars]) {
        prevLastChar = lastTwoChars;
      }
    }

    let choiceFirstChar = choice.slice(0, 1);
    if (choice.length >= 2) {
      const firstTwoChars = choice.slice(0, 2);
      if (yoonMap[firstTwoChars]) {
        choiceFirstChar = firstTwoChars;
      } else if (choice.length >= 3) {
        const firstThreeChars = choice.slice(0, 3);
        if (yoonMap[firstThreeChars]) {
          choiceFirstChar = firstThreeChars;
        }
      }
    }

    const prevLastCharNormalized = yoonMap[prevLastChar] || prevLastChar;
    const choiceFirstCharNormalized = yoonMap[choiceFirstChar] || choiceFirstChar;

    if (choiceFirstCharNormalized !== prevLastCharNormalized) {
      setWrongWord(choice);
      setIsGameOver(true);
      setIsResult(true);
      setWinner((currentPlayer === 'parent' ? 'üê∂' : 'ü¶Å') + '„ÅÆÂãù„Å°ÔºÅÔºàÁõ∏Êâã„ÅåÊ≠£„Åó„ÅÑÂçòË™û„ÇíÈÅ∏„Å∞„Å™„Åã„Å£„ÅüÔºâ');
      return;
    }

    const choiceLastChar = choice.slice(-1);
    const endChar = isHiragana ? '„Çì' : '„É≥';
    if (choiceLastChar === endChar) {
      setWrongWord(choice);
      setIsGameOver(true);
      setIsResult(true);
      setWinner((currentPlayer === 'parent' ? 'üê∂' : 'ü¶Å') + `„ÅÆÂãù„Å°ÔºÅÔºàÁõ∏Êâã„Åå„Äå${endChar}„Äç„ÅßÁµÇ„Çè„ÇãÂçòË™û„ÇíÈÅ∏„Çì„Å†Ôºâ`);
      return;
    }

    setHistory([...history, choice]);
    setCurrentWord(choice);
    generateChoices(choice);

    if (turn >= 9) {
      setTimeout(() => {
        showResult();
      }, 500);
      setIsGameOver(true);
      return;
    }

    setCurrentPlayer(currentPlayer === 'parent' ? 'child' : 'parent');
    setTurn(prev => prev + 1);
    setStartTime(Date.now());
  };

  const showResult = () => {
    const parentTotal = times.parent.reduce((a, b) => a + b, 0);
    const childTotal = times.child.reduce((a, b) => a + b, 0);
    let winnerText = '';
    if (parentTotal < childTotal) {
      winnerText = 'ü¶Å„ÅÆÂãù„Å°ÔºÅ';
    } else if (childTotal < parentTotal) {
      winnerText = 'üê∂„ÅÆÂãù„Å°ÔºÅ';
    } else {
      winnerText = 'Âºï„ÅçÂàÜ„ÅëÔºÅ';
    }
    setWinner(winnerText);
    setIsResult(true);
  };

  const handleRetry = () => {
    initializeGame();
  };

  const handleSwitchGame = () => {
    setIsHiragana(!isHiragana);
    handleRetry();
  };

  if (isResult) {
    const parentTotal = times.parent.reduce((a, b) => a + b, 0);
    const childTotal = times.child.reduce((a, b) => a + b, 0);
    return (
      <GameLayout onRetry={handleRetry} onSwitchGame={handleSwitchGame}>
        <View style={styles.container}>
          <View style={styles.historyContainer}>
            {history.map((word, idx) => (
              <Text key={idx} style={styles.historyItem}>
                {word}
                {idx < history.length - 1 && ' ‚Üí '}
              </Text>
            ))}
            {wrongWord && (
              <>
                <Text style={styles.historyItem}> ‚Üí </Text>
                <Text style={[styles.historyItem, styles.wrongWord]}>{wrongWord}</Text>
              </>
            )}
          </View>
          <View style={styles.resultsContainer}>
            <Animated.Text
              style={[
                styles.winnerEmoji,
                {
                  transform: [{
                    translateY: bounceAnim.interpolate({
                      inputRange: [0, 1],
                      outputRange: [0, -20],
                    }),
                  }],
                },
              ]}
            >
              {winner.includes('ü¶Å') ? 'ü¶Å' : winner.includes('üê∂') ? 'üê∂' : 'ü§ù'}
            </Animated.Text>
            <Animated.Text
              style={[
                styles.winnerText,
                {
                  transform: [{
                    translateY: textBounceAnim.interpolate({
                      inputRange: [0, 1],
                      outputRange: [0, -10],
                    }),
                  }],
                },
              ]}
            >
              üéâ{winner}
            </Animated.Text>
            <View style={styles.resultTimes}>
              <View style={styles.resultTimeRow}>
                <Text style={styles.playerEmoji}>ü¶Å</Text>
                <Text style={[styles.timeText, styles.parentTime]}>
                  {parentTotal.toFixed(1)}Áßí
                </Text>
              </View>
              <View style={styles.resultTimeRow}>
                <Text style={styles.playerEmoji}>üê∂</Text>
                <Text style={[styles.timeText, styles.childTime]}>
                  {childTotal.toFixed(1)}Áßí
                </Text>
              </View>
            </View>
          </View>
        </View>
      </GameLayout>
    );
  }

  return (
    <GameLayout onRetry={handleRetry} onSwitchGame={handleSwitchGame}>
      <View style={styles.container}>
        <View style={styles.historyContainer}>
          {history.map((word, idx) => (
            <Text key={idx} style={styles.historyItem}>
              {word}
              {idx < history.length - 1 && ' ‚Üí '}
            </Text>
          ))}
        </View>
        <View style={styles.playersArea}>
          <View style={[styles.playerArea, currentPlayer === 'parent' && styles.activePlayer]}>
            <View style={styles.playerTitle}>
              <Text style={[styles.playerEmoji, currentPlayer === 'parent' && styles.activeEmoji]}>
                ü¶Å
              </Text>
              <Text style={[styles.timeText, styles.parentTime]}>
                {(times.parent.reduce((a, b) => a + b, 0) + (currentPlayer === 'parent' ? elapsed : 0)).toFixed(1)}Áßí
              </Text>
            </View>
            {currentPlayer === 'parent' && (
              <View style={styles.choicesArea}>
                {choices.map((choice, idx) => (
                  <TouchableOpacity
                    key={idx}
                    style={styles.choiceButton}
                    onPress={() => handleChoice(choice)}
                  >
                    <Text style={styles.choiceText}>{choice}</Text>
                  </TouchableOpacity>
                ))}
              </View>
            )}
          </View>

          <View style={[styles.playerArea, currentPlayer === 'child' && styles.activePlayer]}>
            <View style={styles.playerTitle}>
              <Text style={[styles.playerEmoji, currentPlayer === 'child' && styles.activeEmoji]}>
                üê∂
              </Text>
              <Text style={[styles.timeText, styles.childTime]}>
                {(times.child.reduce((a, b) => a + b, 0) + (currentPlayer === 'child' ? elapsed : 0)).toFixed(1)}Áßí
              </Text>
            </View>
            {currentPlayer === 'child' && (
              <View style={styles.choicesArea}>
                {choices.map((choice, idx) => (
                  <TouchableOpacity
                    key={idx}
                    style={styles.choiceButton}
                    onPress={() => handleChoice(choice)}
                  >
                    <Text style={styles.choiceText}>{choice}</Text>
                  </TouchableOpacity>
                ))}
              </View>
            )}
          </View>
        </View>
      </View>
    </GameLayout>
  );
} 